package com.capgemini.gameoflife;

import static org.junit.Assert.*;

import org.junit.Test;

public class BoardTest {
	private static final CellState ALIVE = CellState.ALIVE;
	private static final CellState DEAD = CellState.DEAD;
	private Board board;

	@Test
	public void shouldReturnCorrectNumberOfColumnsForCreatedBoard() {
		// given
		int numberOfColumns = 10;
		int numberOfRows = 11;
		board = new Board(numberOfRows, numberOfColumns);
		// when
		int actualNumberOfColumns = board.getNumberOfColumns();
		// then
		assertEquals(numberOfColumns, actualNumberOfColumns);
	}

	@Test
	public void shouldReturnCorrectNumberOfRowsForCreatedBoard() {
		// given
		int numberOfColumns = 10;
		int numberOfRows = 11;
		board = new Board(numberOfRows, numberOfColumns);
		// when
		int actualNumberOfRows = board.getNumberOfRows();
		// then
		assertEquals(numberOfRows, actualNumberOfRows);
	}

	@Test
	public void shouldReturnDeadForAnyCellOfTheInitialBoard() {
		// given
		board = new Board(1, 1);
		// when
		CellState actualState = board.getBoardOfCells()[0][0].getCellState();
		// then
		assertEquals(DEAD, actualState);
	}

	@Test
	public void shouldReturnAliveForAliveCellInInitializedBoard() {
		// given
		board = new Board(5, 5);
		Cell[][] initialBoard = board.getBoardOfCells();
		board.setCellStateToAlive(0, 0, initialBoard);
		// when
		board.createBoardInitializedToPlay(initialBoard);
		CellState actualState = board.getBoardOfCells()[0][0].getCellState();
		// then
		assertEquals(ALIVE, actualState);
	}

	@Test
	public void shouldReturnDeadForDeadCellInInitializedBoard() {
		// given
		board = new Board(5, 5);
		Cell[][] initialBoard = board.getBoardOfCells();
		board.setCellStateToAlive(0, 0, initialBoard);
		// when
		board.createBoardInitializedToPlay(initialBoard);
		CellState actualState = board.getBoardOfCells()[0][1].getCellState();
		// then
		assertEquals(DEAD, actualState);
	}

	@Test
	public void shouldReturn0ForCellInTheMiddleIfTheOnlyOneAlive() {
		// given
		board = new Board(3, 3);
		board.setCellStateToAlive(1, 1, board.getBoardOfCells());
		// when
		int neighbours = board.countAliveNeighbours(board.getBoardOfCells()[1][1]);
		// then
		assertEquals(0, neighbours);
	}

	@Test
	public void shouldReturn3ForCellInTheMiddleIfFirstRowOfCellsIsAlive() {
		// given
		board = new Board(3, 3);
		board.setCellStateToAlive(0, 0, board.getBoardOfCells());
		board.setCellStateToAlive(0, 1, board.getBoardOfCells());
		board.setCellStateToAlive(0, 2, board.getBoardOfCells());
		// when
		int neighbours = board.countAliveNeighbours(board.getBoardOfCells()[1][1]);
		// then
		assertEquals(3, neighbours);
	}

	@Test
	public void shouldReturnFalseIfAliveAndLessThan2Neighbours() {
		// given
		board = new Board(3, 3);
		Cell[][] boardOfCells = board.getBoardOfCells();
		board.setCellStateToAlive(1, 1, boardOfCells); // my cell
		board.setCellStateToAlive(0, 0, boardOfCells);
		Cell cell = boardOfCells[1][1];
		int neighbours = board.countAliveNeighbours(cell);
		// when
		boolean shouldLive = cell.shouldLiveInTheNextGeneration(neighbours);
		// then
		assertFalse(shouldLive);
	}

	@Test
	public void shouldReturnFalseIfAliveAndMoreThen3Neighbours() {
		// given
		board = new Board(3, 3);
		Cell[][] boardOfCells = board.getBoardOfCells();
		board.setCellStateToAlive(1, 1, boardOfCells); // my cell
		board.setCellStateToAlive(0, 0, boardOfCells);
		board.setCellStateToAlive(0, 1, boardOfCells);
		board.setCellStateToAlive(0, 2, boardOfCells);
		board.setCellStateToAlive(1, 0, boardOfCells);
		Cell cell = boardOfCells[1][1];
		int neighbours = board.countAliveNeighbours(cell);
		// when
		boolean shouldLive = cell.shouldLiveInTheNextGeneration(neighbours);
		// then
		assertFalse(shouldLive);
	}

	@Test
	public void shouldReturnTrueIfAliveAnd2Or3Neighbours() {
		// given
		board = new Board(3, 3);
		Cell[][] boardOfCells = board.getBoardOfCells();
		board.setCellStateToAlive(1, 1, boardOfCells);
		board.setCellStateToAlive(0, 0, boardOfCells);
		board.setCellStateToAlive(0, 1, boardOfCells);
		Cell cell = boardOfCells[1][1];
		int neighbours = board.countAliveNeighbours(cell);
		// when
		boolean shouldLive = cell.shouldLiveInTheNextGeneration(neighbours);
		// then
		assertTrue(shouldLive);
	}

	@Test
	public void shouldReturnTrueIfDeadAnd3AliveNeigbours() {
		// given
		board = new Board(3, 3);
		Cell[][] boardOfCells = board.getBoardOfCells();
		board.setCellStateToAlive(0, 0, boardOfCells);
		board.setCellStateToAlive(0, 1, boardOfCells);
		board.setCellStateToAlive(1, 1, boardOfCells);
		Cell cell = boardOfCells[1][1]; // my dead cell
		int neighbours = board.countAliveNeighbours(cell);
		// when
		boolean shouldLive = cell.shouldLiveInTheNextGeneration(neighbours);
		// then
		assertTrue(shouldLive);
	}

	@Test
	public void shouldCountNeighboursFor00Corner() {
		// given
		board = new Board(3, 3);
		Cell[][] boardOfCells = board.getBoardOfCells();
		board.setCellStateToAlive(0, 0, boardOfCells);
		board.setCellStateToAlive(0, 1, boardOfCells);
		board.setCellStateToAlive(1, 1, boardOfCells);
		board.setCellStateToAlive(1, 0, boardOfCells);
		Cell cell = boardOfCells[0][0]; // my alive cell
		// when
		int neighbours = board.countAliveNeighbours(cell);
		// then
		assertEquals(3, neighbours);
	}

	@Test
	public void shouldCountNeighboursFor02Corner() {
		// given
		board = new Board(3, 3);
		Cell[][] boardOfCells = board.getBoardOfCells();
		board.setCellStateToAlive(0, 2, boardOfCells);
		board.setCellStateToAlive(0, 1, boardOfCells);
		board.setCellStateToAlive(1, 1, boardOfCells);
		board.setCellStateToAlive(1, 0, boardOfCells);
		Cell cell = boardOfCells[0][2]; // my alive cell
		// when
		int neighbours = board.countAliveNeighbours(cell);
		// then
		assertEquals(2, neighbours);
	}

	@Test
	public void shouldCountNeighboursFor20Corner() {
		// given
		board = new Board(3, 3);
		Cell[][] boardOfCells = board.getBoardOfCells();
		board.setCellStateToAlive(2, 0, boardOfCells);
		board.setCellStateToAlive(0, 1, boardOfCells);
		board.setCellStateToAlive(1, 1, boardOfCells);
		board.setCellStateToAlive(1, 0, boardOfCells);
		Cell cell = boardOfCells[2][0]; // my alive cell
		// when
		int neighbours = board.countAliveNeighbours(cell);
		// then
		assertEquals(2, neighbours);
	}

	@Test
	public void shouldCountNeighboursFor22Corner() {
		// given
		board = new Board(3, 3);
		Cell[][] boardOfCells = board.getBoardOfCells();
		board.setCellStateToAlive(2, 2, boardOfCells);
		board.setCellStateToAlive(0, 1, boardOfCells);
		board.setCellStateToAlive(1, 1, boardOfCells);
		board.setCellStateToAlive(1, 2, boardOfCells);
		Cell cell = boardOfCells[2][2]; // my alive cell
		// when
		int neighbours = board.countAliveNeighbours(cell);
		// then
		assertEquals(2, neighbours);
	}

	@Test
	public void shouldCountNeighboursFor22CornerEvenIfDead() {
		// given
		board = new Board(3, 3);
		Cell[][] boardOfCells = board.getBoardOfCells();
		board.setCellStateToAlive(0, 1, boardOfCells);
		board.setCellStateToAlive(1, 1, boardOfCells);
		board.setCellStateToAlive(1, 2, boardOfCells);
		Cell cell = boardOfCells[2][2]; // my dead cell
		// when
		int neighbours = board.countAliveNeighbours(cell);
		// then
		assertEquals(2, neighbours);
	}
	
	@Test
	public void shouldCopyBoardWithOneAliveCell(){
		// given
		board = new Board(2,2);
		Cell[][] boardOfCells = board.getBoardOfCells();
		board.setCellStateToAlive(0, 0, boardOfCells);
		// when
		Board copyOfBoard=Board.copyBoard(board);
		CellState cell00OfBoard=boardOfCells[0][0].getCellState();
		CellState cell00OfCopyOfBoard=copyOfBoard.getBoardOfCells()[0][0].getCellState();
		// then
		assertEquals(cell00OfBoard, cell00OfCopyOfBoard);
	}
	
	@Test
	public void shouldProduceDeadGenerationForAliveCellWith1Neighbour(){
		// given
		board=new Board(3,3);
		board.setCellStateToAlive(1, 0, board.getBoardOfCells());
		board.setCellStateToAlive(1, 1, board.getBoardOfCells());
		// when
		Board nextGeneration=board.nextGeneration(board);
		boolean isAlive=nextGeneration.getBoardOfCells()[1][0].isAlive()||nextGeneration.getBoardOfCells()[1][1].isAlive();
		// then
		assertFalse(isAlive);
	}
	
	public void shouldProduceAlivePlusOneRebornGenerationForAliveCellWith2Neighbours(){
		// given
		board=new Board(3,3);
		board.setCellStateToAlive(1, 0, board.getBoardOfCells());
		board.setCellStateToAlive(1, 1, board.getBoardOfCells());
		board.setCellStateToAlive(0, 1, board.getBoardOfCells());
		// when
		Board nextGeneration=board.nextGeneration(board);
		boolean isAlive=nextGeneration.getBoardOfCells()[1][0].isAlive()&&nextGeneration.getBoardOfCells()[1][1].isAlive()&&nextGeneration.getBoardOfCells()[0][1].isAlive()&&nextGeneration.getBoardOfCells()[0][0].isAlive();
		// then
		assertTrue(isAlive);
	}
	
	public void shouldProduceAllAliveExcept00InNextGenerationForAliveCellWith3Neighbours(){
		// given
		board=new Board(3,3);
		board.setCellStateToAlive(2, 1, board.getBoardOfCells());
		board.setCellStateToAlive(1, 1, board.getBoardOfCells());
		board.setCellStateToAlive(0, 1, board.getBoardOfCells());
		board.setCellStateToAlive(1, 2, board.getBoardOfCells());
		// when
		Board nextGeneration=board.nextGeneration(board);
		boolean isAlive=nextGeneration.getBoardOfCells()[0][0].isAlive();
		// then
		assertFalse(isAlive);
	}

}

package com.capgemini.gameoflife;

public class Board {
	private static final CellState ALIVE = CellState.ALIVE;
	private static final CellState DEAD = CellState.DEAD;
	private int numberOfColumns;
	private int numberOfRows;
	private Cell[][] boardOfCells;

	public Board(int numberOfRows, int numberOfColumns) {
		this.numberOfRows = numberOfRows;
		this.numberOfColumns = numberOfColumns;
		boardOfCells = new Cell[numberOfRows][numberOfColumns];
		for (int i = 0; i < numberOfRows; i++) {
			for (int j = 0; j < numberOfColumns; j++) {
				boardOfCells[i][j] = new Cell(i, j, DEAD);
			}
		}

	}

	public Board nextGeneration(Board previousGeneration){
		Board nextGeneration=copyBoard(previousGeneration);
		return nextGeneration;
	}
	
	public static Board copyBoard(Board board) {
		int numberOfRows = board.numberOfRows;
		int numberOfColumns = board.numberOfColumns;
		Board copyOfBoard = new Board(numberOfRows, numberOfColumns);
		for (int row = 0; row < numberOfRows; row++) {
			for (int column = 0; column < numberOfColumns; column++) {
				copyOfBoard.boardOfCells[row][column] = new Cell(row, column,
						board.boardOfCells[row][column].getCellState());
			}
		}
		return copyOfBoard;
	}

	public void createBoardInitializedToPlay(Cell[][] initialBoard) {
		int numberOfRows = initialBoard.length;
		int numberOfColumns = initialBoard[0].length;
		for (int i = 0; i < numberOfRows; i++) {
			for (int j = 0; j < numberOfColumns; j++) {
				if (initialBoard[i][j].isAlive()) {
					boardOfCells[i][j].setCellState(ALIVE);
				}
			}
		}
	}

	public int countAliveNeighbours(Cell cell) {
		int neighboursCounter = 0;
		int rowIndex = cell.getRowIndex();
		int rowIndexLeft = rowIndex - 1;
		int rowIndexRight = rowIndex + 1;
		int columnIndex = cell.getColumnIndex();
		int columnIndexLeft = columnIndex - 1;
		int columnIndexRight = columnIndex + 1;
		rowIndexLeft = (rowIndexLeft < 0) ? 0 : rowIndexLeft;
		rowIndexRight = (rowIndexRight >= numberOfRows) ? numberOfRows - 1 : rowIndexRight;
		columnIndexLeft = (columnIndexLeft < 0) ? 0 : columnIndexLeft;
		columnIndexRight = (columnIndexRight >= numberOfColumns) ? numberOfColumns - 1 : columnIndexRight;
		for (int i = rowIndexLeft; i <= rowIndexRight; i++) {
			for (int j = columnIndexLeft; j <= columnIndexRight; j++) {
				if (boardOfCells[i][j].isAlive() && !(i == rowIndex && j == columnIndex)) {
					neighboursCounter++;
				}
			}
		}
		return neighboursCounter;
	}

	public void setCellStateToAlive(int rowIndex, int columnIndex, Cell[][] board) {
		board[rowIndex][columnIndex].setCellState(ALIVE);
	}

	public void setCellStateToDead(int rowIndex, int columnIndex, Cell[][] board) {
		board[rowIndex][columnIndex].setCellState(DEAD);
	}

	public Cell[][] getBoardOfCells() {
		return boardOfCells;
	}

	public void setBoardOfCells(Cell[][] boardOfCells) {
		this.boardOfCells = boardOfCells;
	}

	public int getNumberOfColumns() {
		return numberOfColumns;
	}

	public void setNumberOfColumns(int numberOfColumns) {
		this.numberOfColumns = numberOfColumns;
	}

	public int getNumberOfRows() {
		return numberOfRows;
	}

	public void setNumberOfRows(int numberOfRows) {
		this.numberOfRows = numberOfRows;
	}

}

package com.capgemini.fraudanalyser;

import java.util.List;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class FraudAnalyser {
	/**
	 * class fields specify constants used to distinguish between suspicious and
	 * ordinary transactions.
	 * 
	 * @SUSPICIOUS_USERS refers to user IDs whose transactions are automatically
	 *                   considered suspicious.
	 * @HONEST_USERS refers to users IDs whose transactions are not being
	 *               checked at all.
	 */
	private static final int[] SUSPICIOUS_USERS = { 542, 1052, 2103 };
	private static final int[] HONEST_USERS = { 101, 606 };
	// more than 5 sent by a user in a day
	private static final int SUSPICIOUS_NUMBER_OF_TRANSACTIONS_IN_ONE_DAY = 6;
	// more than 4 to one account sent by a user in a day
	private static final int SUSPICIOUS_NUMBER_OF_TRANSACTIONS_TO_ONE_ACCOUNT_IN_ONE_DAY = 5;
	// more than 3 when sum equals 5000 euros // 4
	private static final int SUSPICIOUS_NUMBER_OF_TRANSACTIONS_5000EURO = 4;
	// more than 2 when sum equals 10000 euros
	private static final int SUSPICIOUS_NUMBER_OF_TRANSACTIONS_10000EURO = 3;
	private static final BigDecimal SUSPICIOUS_SUM_5000 = new BigDecimal(5000.00);
	private static final BigDecimal SUSPICIOUS_SUM_10000 = new BigDecimal(10000.00);

	/**
	 * provides list of suspicious transactions from the list of all
	 * transactions according to arbitrary rules.
	 * 
	 * @param transactionsToAnalyze
	 * @return
	 */
	public Set<Transaction> getSuspiciousTransactions(ArrayList<Transaction> transactionsToAnalyze) {
		Set<Transaction> listOfSuspectTransactions = new HashSet<>();
		Set<Transaction> temporarySuspectTransactionsInAnalyzedList = new HashSet<>();
		// checking list by users - adding all transactions of suspect users to
		// listOfSuspectTransactions
		for (int i = 0; i < transactionsToAnalyze.size(); i++) {
			Transaction t = transactionsToAnalyze.get(i);
			if (isUserAboveSuspicion(t.getUserID())) {
				temporarySuspectTransactionsInAnalyzedList.add(t);
			} else if (isUserSuspectForSure(t.getUserID())) {
				listOfSuspectTransactions.add(t);
			}
		}
		// removing all transactions of honest users from transactionsToAnalyze
		transactionsToAnalyze.removeAll(temporarySuspectTransactionsInAnalyzedList);
		// creating unique values of userIDs, dates and recipients accounts to
		// filter list later
		Set<LocalDate> uniqueDatesInAnalyzedList = getUniqueDatesWithoutHour(transactionsToAnalyze);
		Set uniqueUsersInAnalyzedList = getUniqueUsers(transactionsToAnalyze);
		Set uniqueRecipientAccountsList = getUniqueRecipientAccounts(transactionsToAnalyze);
		// adding all transactions for suspiciously active users (more than 5
		// transactions per user per day) to listOfSuspectTransactions
		listOfSuspectTransactions.addAll(analyseNumberOfTransactionsPerUserPerDay(transactionsToAnalyze,
				uniqueUsersInAnalyzedList, uniqueDatesInAnalyzedList));
		// adding all transactions for users having more than 4 transactions per
		// day to one account
		// to listOfSuspectTransactions
		listOfSuspectTransactions.addAll(analyseNumberOfTransactionsToOneAccountPerUserPerDay(transactionsToAnalyze,
				uniqueUsersInAnalyzedList, uniqueDatesInAnalyzedList, uniqueRecipientAccountsList));
		listOfSuspectTransactions.addAll(analyseAmountOfMoneyPerUserPerDay(transactionsToAnalyze, uniqueUsersInAnalyzedList, uniqueDatesInAnalyzedList));
		if (listOfSuspectTransactions.isEmpty()) {
			System.out.println("There are no suspicious transactions in set.");
			return null;
		}
		return listOfSuspectTransactions;
	}

	/**
	 * returns unique set of transactions made by user identified by user ID on
	 * specific day, using @FilteringByUser and @FilteringByDate.
	 * 
	 * @param transactionsToAnalyze
	 * @param userID
	 * @param date
	 * @return
	 */
	private static Set<Transaction> getTransactionsOfUserOnDay(ArrayList<Transaction> transactionsToAnalyze,
			Integer userID, LocalDate date) {
		Set<Transaction> listOfUserTransactionsOnTheDay = new HashSet<>();
		ArrayList<Transaction> transactionsOnSpecificDay = FilteringByDate.filter(transactionsToAnalyze, date);
		ArrayList<Transaction> transactionsOnSpecificDayBySpecificUser = FilteringByUser
				.filter(transactionsOnSpecificDay, (Integer) userID);
		listOfUserTransactionsOnTheDay.addAll(transactionsOnSpecificDayBySpecificUser);
		return listOfUserTransactionsOnTheDay;
	}

	/**
	 * returns unique set of suspicious transactions, implementing the fifth
	 * rule: if user made on specific date more than 5 transactions, all his
	 * transactions are suspicious
	 * 
	 * @param transactionsToAnalyze
	 * @param uniqueUsersInAnalyzedList
	 * @param uniqueDatesInAnalyzedList
	 * @return
	 */
	public Set<Transaction> analyseNumberOfTransactionsPerUserPerDay(ArrayList<Transaction> transactionsToAnalyze,
			Set uniqueUsersInAnalyzedList, Set<LocalDate> uniqueDatesInAnalyzedList) {
		Set<Transaction> suspectTransactions = new HashSet<>();
		// converting set to list, so it's navigable
		List users = new ArrayList();
		users.addAll(uniqueUsersInAnalyzedList);
		List<LocalDate> dates = new ArrayList<>();
		dates.addAll(uniqueDatesInAnalyzedList);
		transactionsToAnalyze.sort(Transaction.COMPARE_BY_DATE_OF_TRANSFER);
		for (int user = 0; user < users.size(); user++) {
			for (int date = 0; date < dates.size(); date++) {
				Set<Transaction> filteredTransactions = getTransactionsOfUserOnDay(transactionsToAnalyze,
						(Integer) users.get(user), dates.get(date));
				// if more than five on one day by user - suspect transaction
				int numberOfTransactions = filteredTransactions.size();
				if (isNumberOfTransactionsSuspicious(numberOfTransactions)) {
					suspectTransactions.addAll(filteredTransactions);
				}
			}
		}
		return suspectTransactions;
	}

	/**
	 * returns unique set of suspicious transactions, implementing second and
	 * third rules: if in a day user made more than 2 transactions for more than
	 * 10000 euros altogether or more than 3 transactions for more than 5000
	 * euros altogether, all his transactions are suspicious
	 * 
	 * @param transactionsToAnalyze
	 * @param uniqueUsersInAnalyzedList
	 * @param uniqueDatesInAnalyzedList
	 * @return
	 */
	public Set<Transaction> analyseAmountOfMoneyPerUserPerDay(ArrayList<Transaction> transactionsToAnalyze,
			Set uniqueUsersInAnalyzedList, Set<LocalDate> uniqueDatesInAnalyzedList) {
		Set<Transaction> suspectTransactions = new HashSet<>();
		// converting set to list, so it's navigable
		List users = new ArrayList();
		users.addAll(uniqueUsersInAnalyzedList);
		List<LocalDate> dates = new ArrayList<>();
		dates.addAll(uniqueDatesInAnalyzedList);
		transactionsToAnalyze.sort(Transaction.COMPARE_BY_DATE_OF_TRANSFER);
		for (int user = 0; user < users.size(); user++) {
			for (int date = 0; date < dates.size(); date++) {
				Set<Transaction> filteredTransactions = getTransactionsOfUserOnDay(transactionsToAnalyze,
						(Integer) users.get(user), dates.get(date));
				BigDecimal sumForUserForDay = addTransferAmounts(filteredTransactions);
				int numberOfTransactions = filteredTransactions.size();
				if (isSuspiciousForAmountOfMoney(numberOfTransactions, sumForUserForDay)) {
					suspectTransactions.addAll(filteredTransactions);
				}
			}
		}
		return suspectTransactions;
	}

	/**
	 * adds transferred amounts of money for transactions on the list.
	 * 
	 * @param filteredTransactions
	 * @return
	 */
	private static BigDecimal addTransferAmounts(Set<Transaction> filteredTransactions) {
		BigDecimal sum = new BigDecimal(0);
		for (Transaction t : filteredTransactions) {
			sum = sum.add(t.getAmountOfMoneyTransferred());
		}
		return sum;
	}

	/**
	 * returns unique set of suspicious transactions, implementing fourth rule:
	 * if more than 4 transactions were made by the user in a day to the same
	 * recipient, all his transactions are suspicious
	 * 
	 * @param transactionsToAnalyze
	 * @param uniqueUsersInAnalyzedList
	 * @param uniqueDatesInAnalyzedList
	 * @param uniqueAccountsInAnalyzedList
	 * @return
	 */
	public Set<Transaction> analyseNumberOfTransactionsToOneAccountPerUserPerDay(
			ArrayList<Transaction> transactionsToAnalyze, Set uniqueUsersInAnalyzedList,
			Set<LocalDate> uniqueDatesInAnalyzedList, Set uniqueAccountsInAnalyzedList) {
		Set<Transaction> suspectTransactions = new HashSet<>();
		// converting set to list, so it's navigable
		List users = new ArrayList();
		users.addAll(uniqueUsersInAnalyzedList);
		List<LocalDate> dates = new ArrayList<>();
		dates.addAll(uniqueDatesInAnalyzedList);
		List accounts = new ArrayList<>();
		accounts.addAll(uniqueAccountsInAnalyzedList);

		transactionsToAnalyze.sort(Transaction.COMPARE_BY_DATE_OF_TRANSFER);
		for (int user = 0; user < users.size(); user++) {
			for (int date = 0; date < dates.size(); date++) {
				for (int account = 0; account < accounts.size(); account++) {
					Set<Transaction> filteredByUserAndDay = getTransactionsOfUserOnDay(transactionsToAnalyze,
							(Integer) users.get(user), dates.get(date));
					ArrayList<Transaction> helper = new ArrayList<>();
					helper.addAll(filteredByUserAndDay);
					ArrayList<Transaction> filteredByAccount = FilteringByRecipientAccount.filter(helper,
							(Long) accounts.get(account));
					Set<Transaction> filtered = new HashSet<>();
					filtered.addAll(filteredByAccount);
					// if more than four on one day by user - suspect
					// transaction
					int numberOfTransactions = filtered.size();
					if (isNumerOfTransactionsToOneAccountSuspicious(numberOfTransactions)) {
						suspectTransactions.addAll(filteredByAccount);
					}
				}
			}
		}
		return suspectTransactions;

	}

	private static boolean isNumberOfTransactionsSuspicious(int numberOfTransactions) {
		return (numberOfTransactions >= SUSPICIOUS_NUMBER_OF_TRANSACTIONS_IN_ONE_DAY) ? true : false;
	}

	private static boolean isNumerOfTransactionsToOneAccountSuspicious(int numberOfTransactions) {
		return (numberOfTransactions >= SUSPICIOUS_NUMBER_OF_TRANSACTIONS_TO_ONE_ACCOUNT_IN_ONE_DAY) ? true : false;
	}

	private static boolean isSuspiciousForAmountOfMoney(int numberOfTransactions, BigDecimal sum) {
		if (numberOfTransactions >= SUSPICIOUS_NUMBER_OF_TRANSACTIONS_10000EURO
				&& sum.compareTo(SUSPICIOUS_SUM_10000) == 1) {
			return true;
		} else if (numberOfTransactions >= SUSPICIOUS_NUMBER_OF_TRANSACTIONS_5000EURO
				&& sum.compareTo(SUSPICIOUS_SUM_5000) == 1) {
			return true;
		} else
			return false;
	}

	/**
	 * returns set of unique users from the transaction list.
	 * 
	 * @param transactionsToAnalyze
	 * @return
	 */
	public static Set getUniqueUsers(ArrayList<Transaction> transactionsToAnalyze) {
		Set users = new HashSet<>();
		for (int i = 0; i < transactionsToAnalyze.size(); i++) {
			users.add(transactionsToAnalyze.get(i).getUserID());
		}
		return users;
	}

	/**
	 * returns set of unique recipient accounts from the transaction list.
	 * 
	 * @param transactionsToAnalyze
	 * @return
	 */
	public static Set getUniqueRecipientAccounts(ArrayList<Transaction> transactionsToAnalyze) {
		Set accounts = new HashSet<>();
		for (int i = 0; i < transactionsToAnalyze.size(); i++) {
			accounts.add(transactionsToAnalyze.get(i).getRecipientAccount());

		}
		return accounts;
	}

	/**
	 * returns set of unique dates by year, month and day from list of
	 * transactions
	 * 
	 * @param transactionsToAnalyze
	 * @return
	 */
	public static Set<LocalDate> getUniqueDatesWithoutHour(ArrayList<Transaction> transactionsToAnalyze) {
		Set<LocalDate> dates = new HashSet<>();
		for (int i = 0; i < transactionsToAnalyze.size(); i++) {
			Transaction t = transactionsToAnalyze.get(i);
			dates.add(t.getDateWithoutHour());
		}
		return dates;
	}

	// TODO change to private and remove tests
	public static boolean isUserAboveSuspicion(int userID) {
		for (int i = 0; i < HONEST_USERS.length; i++) {
			if (userID == HONEST_USERS[i]) {
				return true;
			}
		}
		return false;
	}

	// TODO change to private and remove tests
	public static boolean isUserSuspectForSure(int userID) {
		for (int i = 0; i < SUSPICIOUS_USERS.length; i++) {
			if (userID == SUSPICIOUS_USERS[i]) {
				return true;
			}
		}
		return false;

	}

}

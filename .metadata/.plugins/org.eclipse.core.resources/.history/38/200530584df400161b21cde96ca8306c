package com.capgemini.fraudanalyser;

import static org.junit.Assert.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.Month;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

public class FraudAnalyserTest {

	private ArrayList<Transaction> transactionsToAnalyze;
	private FraudAnalyser fraudAnalyser;

	@Before
	public void init() {
		transactionsToAnalyze = new ArrayList<>();
		transactionsToAnalyze.add(new Transaction.Builder(100, 12345L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 0)).build());
		transactionsToAnalyze.add(new Transaction.Builder(102, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 2, 12, 0)).build());
		transactionsToAnalyze.add(new Transaction.Builder(101, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 3, 12, 0)).build());
		transactionsToAnalyze.add(new Transaction.Builder(606, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 4, 12, 0)).build());
		transactionsToAnalyze.add(new Transaction.Builder(542, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 5, 12, 0)).build());
		transactionsToAnalyze.add(new Transaction.Builder(543, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 6, 12, 0)).build());
		fraudAnalyser = new FraudAnalyser();
	}

	@Test
	public void shouldReturn5For5TransactionsToOneAccount() {
		// given
		ArrayList<Transaction> transactionsToAnalyzeByAccount = new ArrayList<>();
		transactionsToAnalyzeByAccount.add(new Transaction.Builder(100, 12345L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 7)).build());
		transactionsToAnalyzeByAccount.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 6)).build());
		transactionsToAnalyzeByAccount.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12,5)).build());
		transactionsToAnalyzeByAccount.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 1)).build());
		transactionsToAnalyzeByAccount.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 2)).build());
		transactionsToAnalyzeByAccount.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 3)).build());
		Set users = FraudAnalyser.getUniqueUsers(transactionsToAnalyzeByAccount);
		Set dates = FraudAnalyser.getUniqueDatesWithoutHour(transactionsToAnalyzeByAccount);
		Set accounts = FraudAnalyser.getUniqueRecipientAccounts(transactionsToAnalyzeByAccount);
		//System.out.println(dates.size());
		Set<Transaction> suspect = new HashSet<>();
		// when
		suspect = fraudAnalyser.analyseNumberOfTransactionsToOneAccountPerUserPerDay(transactionsToAnalyzeByAccount, users, dates, accounts);
		// then
		assertEquals(5,suspect.size());
	}

	@Test
	public void shouldReturnNullForSixTransactionsByHonestUserByDate() {
		// given
		ArrayList<Transaction> eightTransactionsToAnalyze = new ArrayList<>();
		eightTransactionsToAnalyze.add(new Transaction.Builder(101, 12345L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 0)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(101, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 1)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(101, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 2)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(101, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 3)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(101, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 4)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(101, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 5)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(108, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 5)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(108, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 7)).build());
		Set users = FraudAnalyser.getUniqueUsers(eightTransactionsToAnalyze);
		Set dates = FraudAnalyser.getUniqueDatesWithoutHour(eightTransactionsToAnalyze);
		Set<Transaction> suspect = new HashSet<>();
		// when
		suspect = fraudAnalyser.generateListOfSuspectTransactions(eightTransactionsToAnalyze);
		// then
		assertEquals(null, suspect);
	}

	@Test
	public void shouldReturnSevenElementListForSixTransactionsByUserByDateForOneSuspectUser() {
		// given
		ArrayList<Transaction> eightTransactionsToAnalyze = new ArrayList<>();
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12345L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 0)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 1)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 2)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 3)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 4)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 5)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(542, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 5)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(108, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 7)).build());
		Set users = FraudAnalyser.getUniqueUsers(eightTransactionsToAnalyze);
		Set dates = FraudAnalyser.getUniqueDatesWithoutHour(eightTransactionsToAnalyze);
		Set<Transaction> suspect = new HashSet<>();
		// when
		suspect = fraudAnalyser.generateListOfSuspectTransactions(eightTransactionsToAnalyze);
		// then
		assertEquals(7, suspect.size());
	}

	@Test
	public void shouldReturnSixElementListForSixTransactionsByUserByDateNoSuspectOrHonest() {
		// given
		ArrayList<Transaction> eightTransactionsToAnalyze = new ArrayList<>();
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12345L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 0)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 1)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 2)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 3)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 4)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 5)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(108, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 5)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(108, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 7)).build());
		Set users = FraudAnalyser.getUniqueUsers(eightTransactionsToAnalyze);
		Set dates = FraudAnalyser.getUniqueDatesWithoutHour(eightTransactionsToAnalyze);
		Set<Transaction> suspect = new HashSet<>();
		// when
		suspect = fraudAnalyser.generateListOfSuspectTransactions(eightTransactionsToAnalyze);
		// then
		assertEquals(6, suspect.size());
	}

	@Test
	public void shouldReturnSixElementListForSixTransactionsByUserByDate() {
		// given
		ArrayList<Transaction> eightTransactionsToAnalyze = new ArrayList<>();
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12345L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 0)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 1)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 2)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 3)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 4)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 5)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(108, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 5)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(108, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 7)).build());
		Set users = FraudAnalyser.getUniqueUsers(eightTransactionsToAnalyze);
		Set dates = FraudAnalyser.getUniqueDatesWithoutHour(eightTransactionsToAnalyze);
		Set<Transaction> suspect = new HashSet<>();
		// when
		suspect = fraudAnalyser.analyseNumberOfTransactionsPerUserPerDay(eightTransactionsToAnalyze, users, dates);
		// then
		assertEquals(6, suspect.size());
	}

	@Test
	public void shouldReturn0ElementListForFiveTransactionsByUserByDate() {
		// given
		ArrayList<Transaction> eightTransactionsToAnalyze = new ArrayList<>();
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12345L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 0)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 1)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 2)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 3)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(100, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 4)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(108, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 5)).build());
		eightTransactionsToAnalyze.add(new Transaction.Builder(108, 12346L, new BigDecimal("200.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 7)).build());
		Set users = FraudAnalyser.getUniqueUsers(eightTransactionsToAnalyze);
		Set dates = FraudAnalyser.getUniqueDatesWithoutHour(eightTransactionsToAnalyze);
		Set<Transaction> suspect = new HashSet<>();
		// when
		suspect = fraudAnalyser.analyseNumberOfTransactionsPerUserPerDay(eightTransactionsToAnalyze, users, dates);
		// then
		assertEquals(0, suspect.size());
	}

	@Test
	public void shouldReturnSetOfSixValuesForOneDuplicateTransactionByUser() {
		// given
		transactionsToAnalyze.add(new Transaction.Builder(100, 12345L, new BigDecimal("205.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 0)).build());
		int numberOfUniqueTransactionsByUser = transactionsToAnalyze.size() - 1;
		// when
		Set uniqueUsers = FraudAnalyser.getUniqueUsers(transactionsToAnalyze);
		int numberOfUniqueUsers = uniqueUsers.size();
		// then
		assertEquals(numberOfUniqueTransactionsByUser, numberOfUniqueUsers);
	}

	@Test
	public void shouldReturnThreeValuesForOneDuplicateRecipientAccount() {
		// given
		transactionsToAnalyze.add(new Transaction.Builder(100, 12347L, new BigDecimal("205.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 0)).build());
		int numberOfUniqueAccounts = 3;
		// when
		Set uniqueRecipients = FraudAnalyser.getUniqueRecipientAccounts(transactionsToAnalyze);
		int numberOfUniqueRecipients = uniqueRecipients.size();
		// then
		assertEquals(numberOfUniqueAccounts, numberOfUniqueRecipients);
	}

	@Test
	public void shouldReturnSetOfSixValuesForOneDuplicateTransactionByDate() {
		// given
		transactionsToAnalyze.add(new Transaction.Builder(100, 12345L, new BigDecimal("205.0"),
				LocalDateTime.of(2014, Month.JANUARY, 1, 12, 0)).build());
		int numberOfUniqueTransactionsByDate = transactionsToAnalyze.size() - 1;
		// when
		Set uniqueDates = FraudAnalyser.getUniqueDatesWithoutHour(transactionsToAnalyze);
		int numberOfUniqueDates = uniqueDates.size();
		// then
		assertEquals(numberOfUniqueTransactionsByDate, numberOfUniqueDates);
	}

	@Test
	public void shouldGenerateListOfSuspectTransactionsWithOneElement() {
		// given
		Set transactions = new HashSet<>();
		// when
		transactions = fraudAnalyser.generateListOfSuspectTransactions(transactionsToAnalyze);
		// then
		assertEquals(1, transactions.size());
	}

	@Ignore // works when changing id542, because then there are no suspect
			// transactions
	@Test
	public void shouldReturnNullInsteadOfListOfSuspectTransactionsForNoSuspect() {
		// given
		Set transactions = new HashSet<>();
		// when
		transactions = fraudAnalyser.generateListOfSuspectTransactions(transactionsToAnalyze);
		// then
		assertEquals(null, transactions);
	}

	@Test
	public void shouldReturnFalseForUser100() {
		// given
		Transaction transaction = transactionsToAnalyze.get(0);
		// when
		boolean isHonest = fraudAnalyser.isUserAboveSuspicion(transaction.getUserID());
		// then
		assertFalse(isHonest);
	}

	@Test
	public void shouldReturnTrueForUser101() {
		// given
		Transaction transaction = transactionsToAnalyze.get(2);
		// when
		boolean isHonest = fraudAnalyser.isUserAboveSuspicion(transaction.getUserID());
		// then
		assertTrue(isHonest);
		// fail("Not yet implemented");
	}

	@Test
	public void shouldReturnTrueForUser542() {
		// given
		Transaction transaction = transactionsToAnalyze.get(4);
		// when
		boolean isSuspect = fraudAnalyser.isUserSuspectForSure(transaction.getUserID());
		// then
		assertTrue(isSuspect);
	}

	@Test
	public void shouldReturnFalseForUser543() {
		// given
		Transaction transaction = transactionsToAnalyze.get(5);
		// when
		boolean isSuspect = fraudAnalyser.isUserSuspectForSure(transaction.getUserID());
		// then
		assertFalse(isSuspect);
	}

}

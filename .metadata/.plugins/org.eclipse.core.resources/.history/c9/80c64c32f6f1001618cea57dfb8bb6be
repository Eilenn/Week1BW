package com.capgemini.bowling;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class BowlingTest {
	private BowlingGame bowlingGame;

	@Before
	public void setUp() {
		bowlingGame = new BowlingGame();
	}

	@Test
	public void canRollAll0() {
		// given
		int numberOfPinsDown = 0;
		// when
		bowlingGame.rollManyTimes(numberOfPinsDown, 20);
		// then
		assertEquals(0, bowlingGame.score());
	}

	@Test
	public void canRollAll1() {
		// given
		int numberOfPinsDown = 1;
		// when
		bowlingGame.rollManyTimes(numberOfPinsDown, 20);
		// then
		assertEquals(20, bowlingGame.score());
	}

	@Test(expected = IllegalArgumentException.class)
	public void shouldThrowIllegalArgumentExceptionWhenKnockingNegativeNumberOfPins() {
		// given
		int numberOfPinsDown = -1;
		// when
		bowlingGame.roll(numberOfPinsDown);
	}

	@Test(expected = IllegalArgumentException.class)
	public void shouldThrowIllegalArgumentExceptionWhenKnockingMoreThan10Pins() {
		// given
		int numberOfPinsDown = 11;
		// when
		bowlingGame.roll(numberOfPinsDown);
	}

	@Test
	public void canRollSpareThenStandardRolls() {
		// given
		bowlingGame.roll(2);
		bowlingGame.roll(8);
		bowlingGame.roll(5);
		bowlingGame.rollManyTimes(1, 17);
		// when
		int score = bowlingGame.score();
		// then
		assertEquals(37, score);
	}

	@Test
	public void canRollStandardRollsThenASpare() {
		// given
		bowlingGame.rollManyTimes(1, 16);
		bowlingGame.roll(2);
		bowlingGame.roll(8);
		bowlingGame.roll(5);
		bowlingGame.roll(3);
		// when
		int score = bowlingGame.score();
		// then
		assertEquals(39, score);
	}

	@Test
	public void canRollStrikeFirst() {
		// given
		bowlingGame.roll(10);
		bowlingGame.roll(1);
		bowlingGame.roll(1);
		// when
		int score = bowlingGame.score();
		// then
		assertEquals(14, score);
	}

	@Test
	public void canRollStandardRollsThenStrike() {
		// given
		bowlingGame.rollManyTimes(1, 2);
		bowlingGame.rollStrike(1);
		bowlingGame.rollManyTimes(1, 16);
		int score = bowlingGame.score();
		// then
		assertEquals(30, score);
	}

	@Test
	public void canRollStrikeStandardSpareStandard() {
		// given
		bowlingGame.rollStrike(1);
		bowlingGame.rollManyTimes(1, 2);
		bowlingGame.rollSpare(1);
		bowlingGame.rollManyTimes(1, 14);
		int score = bowlingGame.score();
		// then
		assertEquals(39, score);
	}

	@Test
	public void canRollPerfectGame() {
		// given
		bowlingGame.rollStrike(12);
		// when
		int score = bowlingGame.score();
		// then
		assertEquals(300, score);
	}

	@Test
	public void canRollStrikeIn10thFrame() {
		// given
		bowlingGame.rollManyTimes(1, 18);
		bowlingGame.rollStrike(1);
		bowlingGame.rollManyTimes(1, 2);
		// when
		int score = bowlingGame.score();
		// then
		assertEquals(30, score);
	}

	@Test
	public void canRollSpareIn10thFrame() {
		// given
		bowlingGame.rollManyTimes(1, 18);
		bowlingGame.rollSpare(1);
		bowlingGame.roll(1);
		// when
		int score = bowlingGame.score();
		// then
		assertEquals(29, score);
	}

	@Test
	public void shouldReturnTrueFor20Rolls() {
		// given
		int numberOfPinsDown = 1;
		((BowlingGame) bowlingGame).rollManyTimes(numberOfPinsDown, 20);
		bowlingGame.score();
		// when
		boolean isGameFinished = bowlingGame.isFinished();
		// then
		assertTrue(isGameFinished);
	}

	@Test
	public void shouldReturnTrueFor21Rolls() {
		// given
		((BowlingGame) bowlingGame).rollManyTimes(1, 18);
		((BowlingGame) bowlingGame).rollSpare(1);
		bowlingGame.roll(1);
		bowlingGame.score();
		// when
		boolean isGameFinished = bowlingGame.isFinished();
		// then
		assertTrue(isGameFinished);
	}

	@Test
	public void shouldReturnTrueFor22Rolls() {
		// given
		((BowlingGame) bowlingGame).rollManyTimes(1, 18);
		((BowlingGame) bowlingGame).rollStrike(1);
		((BowlingGame) bowlingGame).rollManyTimes(1, 2);
		bowlingGame.score();
		// when
		boolean isGameFinished = bowlingGame.isFinished();
		// then
		assertTrue(isGameFinished);
	}

	@Test
	public void shouldReturnFalseFor19Rolls() {
		// given
		int numberOfRolls = 19;
		((BowlingGame) bowlingGame).rollManyTimes(1, numberOfRolls);
		// when
		boolean isGameFinished = bowlingGame.isFinished();
		// then
		assertFalse(isGameFinished);
	}

	@Test(expected = IllegalArgumentException.class)
	public void shouldThrowIllegalArgumentExceptionFor23Rolls() {
		// given
		int numberOfRolls = 23;
		// when
		((BowlingGame) bowlingGame).rollManyTimes(1, numberOfRolls);

	}
}

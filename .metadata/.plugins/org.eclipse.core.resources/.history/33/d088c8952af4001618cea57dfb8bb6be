package com.capgemini.fraudanalyser;

import java.util.List;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class FraudAnalyser {

	private static final int[] SUSPECT_USERS = { 542, 1052, 2103 };
	private static final int[] HONEST_USERS = { 101, 606 };
	private static final int SUSPICIOUS_NUMBER_OF_TRANSACTIONS_IN_ONE_DAY = 6;

	public Set<Transaction> generateListOfSuspectTransactions(ArrayList<Transaction> transactionsToAnalyze) {
		Set<Transaction> listOfSuspectTransactions = new HashSet<>();
		Set<Transaction> temporarySuspectTransactionsInAnalyzedList = new HashSet<>();
		// checking list by users - adding all transactions of suspect users to listOfSuspectTransactions and 
		// removing all transactions for honest users from transactionsToAnalyze
		for (int i = 0; i < transactionsToAnalyze.size(); i++) {
			Transaction t = transactionsToAnalyze.get(i);
			if (isUserAboveSuspicion(t.getUserID())) {
				temporarySuspectTransactionsInAnalyzedList.add(t);
			} else if (isUserSuspectForSure(t.getUserID())) {
				listOfSuspectTransactions.add(t);
			}
		}
		transactionsToAnalyze.removeAll(temporarySuspectTransactionsInAnalyzedList);

		Set<LocalDate> uniqueDatesInAnalyzedList = getUniqueDatesWithoutHour(transactionsToAnalyze);
		Set uniqueUsersInAnalyzedList = getUniqueUsers(transactionsToAnalyze);
		//
		listOfSuspectTransactions.addAll(analyseNumberOfTransactionsPerUserPerDay(transactionsToAnalyze, uniqueUsersInAnalyzedList,
				uniqueDatesInAnalyzedList));
		
/*		for (int i = 0; i < transactionsToAnalyze.size(); i++) {
			Transaction t = transactionsToAnalyze.get(i);
		}*/

		// check conditions
		// add suspects to list
		// returns
		if (listOfSuspectTransactions.isEmpty()) {
			return null;
		}
		return listOfSuspectTransactions;
	}

	private static Set<Transaction> getTransactionsOfUserOnDay(ArrayList<Transaction> transactionsToAnalyze,
			Integer userID, LocalDate date) {
		Set<Transaction> listOfUserTransactionsOnTheDay = new HashSet<>();
		ArrayList<Transaction> transactionsOnSpecificDay = FilteringByDate.filter(transactionsToAnalyze, date);
		ArrayList<Transaction> transactionsOnSpecificDayBySpecificUser = FilteringByUser
				.filter(transactionsOnSpecificDay, (Integer) userID);
		listOfUserTransactionsOnTheDay.addAll(transactionsOnSpecificDayBySpecificUser);
		return listOfUserTransactionsOnTheDay;

	}

	public Set<Transaction> analyseNumberOfTransactionsPerUserPerDay(ArrayList<Transaction> transactionsToAnalyze,
			Set uniqueUsersInAnalyzedList, Set<LocalDate> uniqueDatesInAnalyzedList) {
		Set<Transaction> suspectTransactions = new HashSet<>();
		// converting set to list, so it's navigable
		List users = new ArrayList();
		users.addAll(uniqueUsersInAnalyzedList);
		List<LocalDate> dates = new ArrayList<>();
		dates.addAll(uniqueDatesInAnalyzedList);
		transactionsToAnalyze.sort(Transaction.COMPARE_BY_DATE_OF_TRANSFER);
		for (int user = 0; user < users.size(); user++) {

			for (int date = 0; date < dates.size(); date++) {
				Set<Transaction> filteredTransactions = getTransactionsOfUserOnDay(transactionsToAnalyze,
						(Integer) users.get(user), dates.get(date));
				// if more than five on one day by user - suspect transaction
				int numberOfTransactions = filteredTransactions.size();
				if (isNumerOfTransactionsSuspicious(numberOfTransactions)) {
					suspectTransactions.addAll(filteredTransactions);
				}
			}
		}

		return suspectTransactions;

	}

	private static boolean isNumerOfTransactionsSuspicious(int numberOfTransactions) {
		return (numberOfTransactions >= SUSPICIOUS_NUMBER_OF_TRANSACTIONS_IN_ONE_DAY) ? true : false;
	}

	public static Set getUniqueUsers(ArrayList<Transaction> transactionsToAnalyze) {
		Set users = new HashSet<>();
		for (int i = 0; i < transactionsToAnalyze.size(); i++) {
			users.add(transactionsToAnalyze.get(i).getUserID());
		}

		return users;
	}

	public static Set<LocalDate> getUniqueDatesWithoutHour(ArrayList<Transaction> transactionsToAnalyze) {
		Set<LocalDate> dates = new HashSet<>();
		for (int i = 0; i < transactionsToAnalyze.size(); i++) {
			Transaction t = transactionsToAnalyze.get(i);
			dates.add(t.getDateWithoutHour());
		}

		return dates;
	}

	public static boolean isUserAboveSuspicion(int userID) {
		for (int i = 0; i < HONEST_USERS.length; i++) {
			if (userID == HONEST_USERS[i]) {
				return true;
			}
		}
		return false;
	}

	public static boolean isUserSuspectForSure(int userID) {
		for (int i = 0; i < SUSPECT_USERS.length; i++) {
			if (userID == SUSPECT_USERS[i]) {
				return true;
			}
		}
		return false;

	}

}

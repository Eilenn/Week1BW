package com.capgemini.bowling;

public class BowlingGame implements BowlingGameResultCalculator {
	final int NUMBER_OF_FRAMES = 10;
	// final int NUMBER_OF_ROLLS_PER_FRAME = 2;
	final int MAXIMAL_NUMBER_OF_ROLLS = 22;
	private int[] listOfRolls = new int[MAXIMAL_NUMBER_OF_ROLLS - 1];
	private int currentRoll = 0;
	int score = 0;

	@Override
	public void roll(int numberOfPins) {
		if (numberOfPins < 0) {
			throw new IllegalArgumentException("You cannot knock down negative number of pins");
		} else if (numberOfPins > 10) {
			throw new IllegalArgumentException("You cannot knock down more than 10 pins!");
		} else {
			listOfRolls[currentRoll] = numberOfPins;
			currentRoll++;
		}

	}

	@Override
	public int score() {
		int whichRoll = 0;
		for (int frames = 0; frames < NUMBER_OF_FRAMES; frames++) {
			if(listOfRolls[whichRoll]==10){
				score+= listOfRolls[whichRoll] + listOfRolls[whichRoll + 1]+listOfRolls[whichRoll+2];
				whichRoll--;
			}
			else if (isRollASpare(whichRoll)) {
				score += standardScoreForFrame(whichRoll) + spareBonus(whichRoll);
			} else {
				score += standardScoreForFrame(whichRoll);
			}
			whichRoll += 2;
		}
		return score;
	}

	private boolean isRollASpare(int whichRoll) {
		return listOfRolls[whichRoll] + listOfRolls[whichRoll + 1] == 10;
	}

	private int standardScoreForFrame(int whichRoll) {
		return listOfRolls[whichRoll] + listOfRolls[whichRoll + 1];
	}
	
	private int spareBonus(int whichRoll) {
		return listOfRolls[whichRoll+2];
	}
	
	private int strikeBonus(int whichRoll) {
		return listOfRolls[whichRoll+2];
	}

	@Override
	public boolean isFinished() {
		// TODO Auto-generated method stub
		return false;
	}

	public void rollManyTimes(int numberOfPinsDown, int numberOfRolls) {
		for (int i = 0; i < numberOfRolls; i++) {
			roll(numberOfPinsDown);
		}

	}
	
	public void rollStrike(int numberOfRolls) {
		for (int i = 0; i < numberOfRolls; i++) {
			roll(10);
		}

	}
	
}
